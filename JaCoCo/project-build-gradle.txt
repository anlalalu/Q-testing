apply plugin: 'jacoco'

// YOUR_SOURCE_DIRS
def coverageSourceDirs = [
        './src/main/java'
]

task jacocoTestReportSingle(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    // NOTE: Put your ec file here
    executionData = files("/Users/huangan/git_oschina/automated-testing/benchmark/ActivityTest_instrumented-output/coverage_single/coverage.ec")
//    executionData = files("/Users/huangan/Desktop/coverage3.ec")
//    executionData = fileTree(dir: '/Users/huangan/git_oschina/automated-testing/benchmark/tmp', include: '**/*.ec')

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

task jacocoTestReportMerge(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    // NOTE: Put your ec file here
//    executionData = files("/Users/huangan/git_oschina/automated-testing/benchmark/tmp/coverage.ec")
//    executionData = files("/Users/huangan/Desktop/coverage3.ec")
    executionData = fileTree(dir: '/Users/huangan/git_oschina/automated-testing/benchmark/ActivityTest_instrumented-output/coverage_merge', include: '**/*.ec')

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}